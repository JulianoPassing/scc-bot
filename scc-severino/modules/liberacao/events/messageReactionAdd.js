export default {
    name: 'messageReactionAdd',
    async execute(reaction, user) {
        console.log('üîç Evento messageReactionAdd detectado!');
        console.log('üìù Canal:', reaction.message.channel.id);
        console.log('üòÄ Emoji:', reaction.emoji.name);
        console.log('üë§ Usu√°rio:', user.tag);
        
        // Verificar se a rea√ß√£o √© parcial e buscar a mensagem completa
        if (reaction.partial) {
            try {
                await reaction.fetch();
            } catch (error) {
                console.error('Erro ao buscar rea√ß√£o:', error);
                return;
            }
        }

        // Verificar se √© o canal espec√≠fico
        if (reaction.message.channel.id !== '1317096106844225586') {
            console.log('‚ùå Canal incorreto, saindo...');
            return;
        }

        // Verificar se o emoji √© V_confirm (verifica√ß√£o mais flex√≠vel)
        console.log('üîç Verificando emoji:', reaction.emoji.name);
        if (reaction.emoji.name !== 'V_confirm' && reaction.emoji.name !== '‚úÖ') {
            console.log('‚ùå Emoji incorreto, saindo...');
            return;
        }

        try {
            const guild = reaction.message.guild;
            const member = await guild.members.fetch(user.id);
            
            // Obter o nome da mensagem (primeira linha ou conte√∫do da mensagem)
            const messageContent = reaction.message.content;
            let messageName = messageContent.split('\n')[0] || messageContent || 'Usu√°rio Liberado';
            
            // Limpar o nome de formata√ß√µes e limitar a 32 caracteres
            messageName = messageName
                .replace(/\*\*/g, '') // Remove **
                .replace(/\*/g, '') // Remove *
                .replace(/`/g, '') // Remove `
                .replace(/__/g, '') // Remove __
                .replace(/#/g, '') // Remove #
                .replace(/\n/g, ' ') // Remove quebras de linha
                .replace(/\s+/g, ' ') // Remove espa√ßos extras
                .trim();
            
            // Limitar a 32 caracteres (limite do Discord)
            if (messageName.length > 32) {
                messageName = messageName.substring(0, 29) + '...';
            }
            
            // Se ficou vazio, usar nome padr√£o
            if (!messageName || messageName.length === 0) {
                messageName = 'Usu√°rio Liberado';
            }
            
            console.log(`üìù Nome processado: "${messageName}" (${messageName.length} caracteres)`);
            
            // Cargos
            const cargoAdicionar = '1317086939555434557';
            const cargoRemover = '1263487190575349892';
            
            // Verificar permiss√µes do bot
            const botMember = guild.members.cache.get(client.user.id);
            const hasManageNicknames = botMember.permissions.has('ManageNicknames');
            const hasManageRoles = botMember.permissions.has('ManageRoles');
            
            console.log(`üîê Permiss√µes do bot: ManageNicknames=${hasManageNicknames}, ManageRoles=${hasManageRoles}`);
            
            // Alterar nickname do usu√°rio (se tiver permiss√£o)
            if (hasManageNicknames) {
                await member.setNickname(messageName);
                console.log(`‚úÖ Nickname alterado para: ${messageName}`);
            } else {
                console.log(`‚ùå Bot n√£o tem permiss√£o para alterar nickname`);
            }
            
            // Adicionar cargo (se tiver permiss√£o)
            if (hasManageRoles && cargoAdicionar) {
                await member.roles.add(cargoAdicionar);
                console.log(`‚úÖ Cargo adicionado: ${cargoAdicionar}`);
            } else {
                console.log(`‚ùå Bot n√£o tem permiss√£o para adicionar cargos`);
            }
            
            // Remover cargo (se tiver permiss√£o)
            if (hasManageRoles && cargoRemover) {
                await member.roles.remove(cargoRemover);
                console.log(`‚úÖ Cargo removido: ${cargoRemover}`);
            } else {
                console.log(`‚ùå Bot n√£o tem permiss√£o para remover cargos`);
            }
            
            console.log(`‚úÖ Usu√°rio ${user.tag} liberado com sucesso!`);
            
            // Preparar mensagem de confirma√ß√£o
            let confirmMessage = `‚úÖ **Libera√ß√£o processada!**\nüë§ **Usu√°rio:** ${user}\nüìù **Nome processado:** ${messageName}\n`;
            
            if (hasManageNicknames) {
                confirmMessage += `‚úÖ **Nickname alterado**\n`;
            } else {
                confirmMessage += `‚ùå **Nickname n√£o alterado** (sem permiss√£o)\n`;
            }
            
            if (hasManageRoles) {
                confirmMessage += `‚ûï **Cargo adicionado:** <@&${cargoAdicionar}>\n‚ûñ **Cargo removido:** <@&${cargoRemover}>`;
            } else {
                confirmMessage += `‚ùå **Cargos n√£o alterados** (sem permiss√£o)`;
            }
            
            // Enviar mensagem de confirma√ß√£o
            const confirmChannel = reaction.message.channel;
            await confirmChannel.send({
                content: confirmMessage
            });
            
        } catch (error) {
            console.error('‚ùå Erro ao processar libera√ß√£o:', error);
            
            // Enviar mensagem de erro
            const errorChannel = reaction.message.channel;
            await errorChannel.send({
                content: `‚ùå **Erro ao processar libera√ß√£o:** ${error.message}`
            });
        }
    }
}; 