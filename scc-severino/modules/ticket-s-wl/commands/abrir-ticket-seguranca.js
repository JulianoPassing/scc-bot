import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import { createTicketChannel, getNextTicketNumber } from '../utils/ticketManager.js';
import config from '../config.json' with { type: 'json' };

export const data = {
  name: 'abrir-ticket-seguranca',
  description: 'Abre um ticket de seguran√ßa.'
};

export async function execute(message, args, client) {
  const user = message.author;
  const guild = message.guild;
  const reason = args.join(' ') || 'Sem motivo especificado';

  // Verifica se j√° existe ticket em qualquer categoria de seguran√ßa
  const existing = guild.channels.cache.find(
    channel => channel.name === `seg-${user.username.toLowerCase()}` && 
               config.securityCategories.includes(channel.parentId)
  );
  if (existing) {
    return message.reply('‚ùå Voc√™ j√° possui um ticket aberto: ' + existing.toString());
  }

  const ticketNumber = await getNextTicketNumber();
  const channelName = `seg-${user.username.toLowerCase()}`;
  
  let ticketChannel;
  try {
    ticketChannel = await createTicketChannel(guild, channelName, user, reason, ticketNumber, client);
  } catch (err) {
    console.error('Erro ao criar canal do ticket de seguran√ßa:', err);
    
    // Verificar se √© erro de limite de canais atingido
    if (err.code === 30013) {
      return message.reply({ 
        content: '‚ùå **Limite de canais atingido!**\n\nO servidor atingiu o limite m√°ximo de 500 canais. Entre em contato com a administra√ß√£o para resolver esta situa√ß√£o.' 
      });
    }
    
    return message.reply({ content: '‚ùå Erro ao criar o canal do ticket. Verifique se a categoria existe, se o bot tem permiss√£o e se o ID est√° correto.' });
  }

  const welcomeEmbed = new EmbedBuilder()
            .setColor('#EAF207')
    .setTitle(`üõ°Ô∏è Ticket de Seguran√ßa #${ticketNumber}`)
    .setDescription(`Ol√° ${user}, obrigado por abrir um ticket de seguran√ßa.`)
    .addFields(
      { name: 'Motivo', value: reason },
      { name: 'Instru√ß√µes', value: 'Descreva seu problema. A equipe ir√° te atender em breve.' }
    )
    .setFooter({ text: 'Use o bot√£o abaixo para fechar este ticket quando resolvido.' })
    .setTimestamp();

  const closeButton = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId('close_ticket')
      .setLabel('Fechar Ticket')
      .setStyle(ButtonStyle.Danger)
      .setEmoji('üîí')
  );

  await ticketChannel.send({
    content: `${user}`,
    embeds: [welcomeEmbed],
    components: [closeButton]
  });

  // Mensagem autom√°tica informando sobre o hor√°rio de atendimento
  try {
    // Enviar como mensagem simples primeiro para teste
    await ticketChannel.send('Ol√°. Seu ticket foi recebido e est√° na fila para atendimento. Nossa equipe entrar√° em contato em breve, lembrando que nosso hor√°rio de atendimento √© de segunda a sexta-feira. N√£o √© necess√°rio enviar novas mensagens.');
  } catch (error) {
    console.error('[ERRO] Falha ao enviar mensagem autom√°tica:', error);
  }

  await message.reply('‚úÖ Ticket criado com sucesso!');
} 