import { EmbedBuilder } from 'discord.js';
import { TICKET_PERMISSIONS } from '../config.js';
import { configurarPermissoesTicket } from '../utils/ticketPermissions.js';

export const data = {
  name: 'corrigir-permissoes',
  description: 'Corrige as permiss√µes de todos os tickets existentes.'
};

export async function execute(message, args, client) {
  // Verificar se o usu√°rio tem permiss√£o de administrador
  if (!message.member.permissions.has('Administrator')) {
    return message.reply('‚ùå Voc√™ precisa ter permiss√£o de Administrador para usar este comando.');
  }

  const guild = message.guild;
  const embed = new EmbedBuilder()
    .setColor('#FFA500')
    .setTitle('üîß Corrigindo Permiss√µes dos Tickets')
    .setDescription('Iniciando corre√ß√£o das permiss√µes de todos os tickets...')
    .setTimestamp();

  const statusMsg = await message.reply({ embeds: [embed] });

  let ticketsCorrigidos = 0;
  let ticketsComErro = 0;
  const categorias = Object.keys(TICKET_PERMISSIONS);

  // Buscar todos os canais que parecem ser tickets
  const ticketChannels = guild.channels.cache.filter(channel => {
    if (channel.type !== 0) return false; // Apenas canais de texto
    
    // Verificar se o nome do canal corresponde ao padr√£o de tickets
    return categorias.some(categoria => {
      const emoji = TICKET_PERMISSIONS[categoria].emoji;
      return channel.name.startsWith(`${emoji}${categoria}-`);
    });
  });

  embed.setDescription(`Encontrados ${ticketChannels.size} tickets para corrigir...`);
  await statusMsg.edit({ embeds: [embed] });

  for (const [channelId, channel] of ticketChannels) {
    try {
      // Determinar a categoria do ticket baseado no nome
      let categoriaEncontrada = null;
      for (const categoria of categorias) {
        const emoji = TICKET_PERMISSIONS[categoria].emoji;
        if (channel.name.startsWith(`${emoji}${categoria}-`)) {
          categoriaEncontrada = categoria;
          break;
        }
      }

      if (!categoriaEncontrada) {
        console.log(`N√£o foi poss√≠vel determinar a categoria do ticket: ${channel.name}`);
        ticketsComErro++;
        continue;
      }

      // Extrair o nome do usu√°rio do nome do canal
      const nomePartes = channel.name.split('-');
      if (nomePartes.length < 2) {
        console.log(`Formato de nome inv√°lido para o ticket: ${channel.name}`);
        ticketsComErro++;
        continue;
      }

      // Buscar o usu√°rio pelo nome (aproximado)
      const nomeUsuario = nomePartes.slice(1).join('-'); // Pega tudo ap√≥s o primeiro h√≠fen
      const usuario = guild.members.cache.find(member => 
        member.user.username.toLowerCase() === nomeUsuario.toLowerCase()
      );

      if (!usuario) {
        console.log(`Usu√°rio n√£o encontrado para o ticket: ${channel.name}`);
        ticketsComErro++;
        continue;
      }

      // Corrigir permiss√µes
      await configurarPermissoesTicket(channel, categoriaEncontrada, usuario.id);
      ticketsCorrigidos++;

      // Atualizar status a cada 5 tickets
      if (ticketsCorrigidos % 5 === 0) {
        embed.setDescription(`Corrigindo permiss√µes... ${ticketsCorrigidos}/${ticketChannels.size} tickets processados`);
        await statusMsg.edit({ embeds: [embed] });
      }

    } catch (error) {
      console.error(`Erro ao corrigir permiss√µes do ticket ${channel.name}:`, error);
      ticketsComErro++;
    }
  }

  // Resultado final
  embed.setColor(ticketsComErro === 0 ? '#43B581' : '#FFA500')
    .setTitle('‚úÖ Corre√ß√£o de Permiss√µes Conclu√≠da')
    .setDescription(
      `**Resultado da corre√ß√£o:**\n` +
      `‚úÖ Tickets corrigidos: ${ticketsCorrigidos}\n` +
      `‚ùå Tickets com erro: ${ticketsComErro}\n` +
      `üìä Total processado: ${ticketChannels.size}`
    )
    .setFooter({ text: 'Sistema de Tickets StreetCarClub' });

  await statusMsg.edit({ embeds: [embed] });
} 